pipeline {
    agent any
    stages {
    	stage('PRE BUILD') {
    		parallel {
    			stage('UNIT TESTS') {
					agent {
                		docker { image 'maven:3-alpine' }
            		}
            		steps{
                		sh 'mvn -f maths/pom.xml clean verify'
            		}
        		}
        		
    			stage("SONAR CODE CHECK"){
        			steps{
						withSonarQubeEnv('MySonarQube') {
                			sh '/home/dinesh/ci_cd/sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner -Dproject.settings=maths/sonar-scanner.properties'
            			}
            			
            			timeout(time: 2, unit: 'MINUTES') {
	                		// Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
	                		// true = set pipeline to UNSTABLE, false = don't
	                		waitForQualityGate abortPipeline: true
            			}
        			}
    			}
    		}
    	}
    	stage('PROVISION') {
    		parallel {
    			stage('DATABASE') {
    				steps {
    					sh 'echo USED TO PROVISION DATABASE'
    				}
    			}
    			stage('SERVICE V. (WIREMOCK)') {
    				steps {
    					sh 'echo USED TO PROVISION VIRTUALIZED END POINTS'
    				}
    			}
    			stage('PERF. (JMETER') {
    				steps {
    					sh 'echo USED TO PROVISION JMeter Service'
    				}
    			}
    		}
    		
    	}
		stage('PREVIEW ENV.') {
    		steps {
    			sh 'echo Application is deployed here in Preview environment'
    		}
    	}
    	stage('TEST') {
    		parallel {
    			stage('UI TESTS') {
    				steps {
    					sh 'echo UI TESTS'
    				}
    			}
    			stage('API TESTS') {
    				steps {
    					sh 'echo UI TESTS'
    				}
    			}
    			stage('SHIFT LEFT PERF. TESTS') {
    				steps {
    					sh 'echo SHIFT LEFT PERF. TESTS'
    				}
    			}
    		}
    	}
    	
    	stage('CLEAN-UP') {
    		steps {
    			sh 'echo CLEAN UP THE PROVISIONED RESOURCES'
    		}
    	}
    	
    	stage('DEPLOY-TEST-ENV') {
    		steps {
    			sh 'echo DEPLOY ON THE TEST ENVIRONMENT'
    		}
    	}
    	
    	stage('TEST-TEST-ENV') {
    		steps {
    			sh 'echo TEST IN TEST ENVIRONMENT'
    		}
    	}
    	
    	stage('DEPLOY - TRIAL/PRE-PROD') {
    		steps {
    			sh 'echo DEPLOY IN TRIAL/PREPROD ENVIRONMENT'
    		}
    	}
    	
    	stage('TEST - TRIAL/PRE-PROD') {
    		parallel {
    			stage('INTEGRATION TESTS') {
    				steps {
    					sh 'echo INETGRATION TESTS'
    				}
    			}
    			
    			stage('PERFORMANCE TESTS') {
    				steps {
    					sh 'echo PERFORMANCE TESTS'
    				}
    			}
    		}
    	}
    }
}
